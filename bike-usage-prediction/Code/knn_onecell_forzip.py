# -*- coding: utf-8 -*-
"""KNN-onecell-forzip.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n52MoeubhufswBDCSZany8eL4Y0YFuyC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report,confusion_matrix
from sklearn.decomposition import PCA
from sklearn.inspection import DecisionBoundaryDisplay

data = pd.read_csv("training_data_fall2024.csv")
X = data.drop(columns=['increase_stock', 'summertime', 'snow'])
y = data['increase_stock']
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)
X_train_val, X_test, y_train_val, y_test = train_test_split(X, y_encoded,
                                              test_size=0.1, random_state=42 )
X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val,
                                              test_size=0.111, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

knn = KNeighborsClassifier(n_neighbors=11, weights='distance')
knn.fit(X_train_scaled, y_train)
y_pred_train = knn.predict(X_train_scaled)
y_pred = knn.predict(X_test_scaled)
print(f"Accuracy: {accuracy_score(y_test, y_pred) * 100:.2f}%")
print("\nClassification Report on training data:\n",
      classification_report(y_train, y_pred_train))
print("\nConfusion Matrix on training data:\n",
      confusion_matrix(y_train, y_pred_train))

knn = KNeighborsClassifier(n_neighbors=11, weights='uniform')
knn.fit(X_train_scaled, y_train)
y_pred = knn.predict(X_test_scaled)
print(f"Accuracy: {accuracy_score(y_test, y_pred) * 100:.2f}%")
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
import numpy as np
import pandas as pd
results = []
for k in [3, 5, 8, 11]:
    for weight in ['uniform', 'distance']:
        knn = KNeighborsClassifier(n_neighbors=k, weights=weight)
        cv_scores = cross_val_score(knn, X_train_scaled, y_train, cv=5,
                                    scoring='accuracy')
        knn.fit(X_train_scaled, y_train)
        y_pred_train = knn.predict(X_train_scaled)
        y_pred_test = knn.predict(X_test_scaled)
        train_accuracy = accuracy_score(y_train, y_pred_train)
        test_accuracy = accuracy_score(y_test, y_pred_test)
        cv_accuracy = np.mean(cv_scores)
        results.append({
            'k': k,
            'weights': weight,
            'Training Accuracy': train_accuracy * 100,
            'Testing Accuracy': test_accuracy * 100,
            'Cross-Validation Accuracy': cv_accuracy * 100
        })
results_df = pd.DataFrame(results)
print(results_df)